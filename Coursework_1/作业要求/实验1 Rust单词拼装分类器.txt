                                  实验1 Rust单词拼装分类器

一、必做内容：

      1. 把Rust源代码中的各类单词（记号）进行拼装分类。
          Rust语言包含了几种类型的单词（记号）：标识符，关键字，字面量数（包括二进制、十进制、八进制和十六机制的整数、浮点数），字面量字符串、注释、分隔符和运算符号等【详细的单词类别及拼装规则见详细阅读下面提供的网址中的页面文字说明】。
      2.要求应用程序应为Windows界面（窗口式图形界面）：使用对话框打开一个Rust源文件，并使用对话框列出所有可以拼装的单词（记号）及其分类。
      3.实验设计实现需要采用的编程语言：C++程序设计语言
      4.根据实验的要求组织必要的测试数据（要能对实验中要求的各类单词都能做完备的测试）
      5.书写完善的实验报告书，书写格式请阅读文件：实验报告书（含软件文档） 版头及正文格式.doc
      6. Rust语言各类单词的拼装约定网址：
         http://rust.e.lntu.edu.cn/reference/tokens.html



二、完成时间：4周

三、上交方法：
    通过砺儒云课堂提交

四、完成方式：每个学生自行独立完成。

五、运行效果样本

Rust源程序：

fn main() {
    let max_iterations = 1_000_000; // 设置迭代次数
    let mut denominator = 1; // 分母初始化为1
    let mut pi_approx = 0.0; // 初始化pi的近似值
    let mut sign = 1.0; // 初始化符号为正
 
    for _ in 0..max_iterations {
        pi_approx += sign * 4.0 / denominator;
        denominator += 2; // 分母递增2
        sign = -sign; // 符号变号
    }
 
    let pi = pi_approx * 2.0; // 最终的pi值是近似值乘以2
    println!("计算得到的pi值是: {}", pi);

    let hex_number = 0x1A3F_CDEF;
    let number1 =98_222;
}




输出结果：


fn main() {  
fn: 关键字  
main: 标识符  
(: 分隔符  
): 分隔符  
{: 分隔符  
  
let max_iterations = 1_000_000; // 设置迭代次数  
    let: 关键字  
    max_iterations: 标识符  
    =: 操作符  
    1_000_000: 字面量（整数）  
    ;: 分隔符  
    // 设置迭代次数: 注释  
  
let mut denominator = 1; // 分母初始化为1  
    let: 关键字  
    mut: 关键字  
    denominator: 标识符  
    =: 操作符  
    1: 字面量（整数）  
    ;: 分隔符  
    // 分母初始化为1: 注释  
  
let mut pi_approx = 0.0; // 初始化pi的近似值  
    let: 关键字  
    mut: 关键字  
    pi_approx: 标识符  
    =: 操作符  
    0.0: 字面量（浮点数）  
    ;: 语句分隔符  
    // 初始化pi的近似值: 注释  
  
let mut sign = 1.0; // 初始化符号为正  
    let: 关键字  
    mut: 关键字  
    sign: 标识符  
    =: 操作符  
    1.0: 字面量（浮点数）  
    ;: 分隔符  
    // 初始化符号为正: 注释  
  
for _ in 0..max_iterations {  
    for: 关键字  
    _: 标识符  
    in: 关键字  
    0:字面量（整数）
    ..:语句分隔符
    max_iterations:  标识符
    {: 分隔符  
  
pi_approx += sign * 4.0 / denominator;  
        pi_approx: 标识符  
        +=: 赋值操作符  
        sign: 标识符  
        *: 操作符  
        4.0: 字面量（浮点数）  
        /: 操作符  
        denominator: 标识符  
        ;: 分隔符  
  
denominator += 2; // 分母递增2  
        denominator: 标识符  
        +=: 赋值操作符  
        2: 字面量（整数）  
        ;: 分隔符  
        // 分母递增2: 注释  
  
sign = -sign; // 符号变号  
        sign: 标识符  
        =: 操作符  
        -: 操作符  
        sign: 标识符  
        ;: 分隔符  
        // 符号变号: 注释  
}  
}: 分隔符
  
let pi = pi_approx * 2.0; // 最终的pi值是近似值乘以2  
    let: 关键字  
    pi: 标识符  
    =: 操作符  
    pi_approx: 标识符  
    *: 操作符  
    2.0: 字面量（浮点数）  
    ;: 分隔符  
    // 最终的pi值是近似值乘以2: 注释  
  
println!("计算得到的pi值是: {}", pi);  
    println!: 宏调用名  
    (: 分隔符  
    "计算得到的pi值是: {}": 字符串字面量  
    pi: 标识符  
    ): 分隔符  
    ;: 分隔符  
  
let hex_number = 0x1A3F_CDEF;  
    let: 关键字  
    hex_number: 标识符  
    =: 操作符  
    0x1A3F_CDEF: 字面量（十六进制整数）  
    ;: 分隔符  
  
let number1 = 98_222;  
    let: 关键字  
    number1: 标识符  
    =: 操作符  
    98_222: 字面量（十进制整数）  
    ;: 分隔符  

}  
}: 分隔符






